const express = require("express");
const app = express();
app.use(express.json());

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const path = require("path");

const dbPath = path.join(__dirname, "covid19IndiaPortal.db");

let database = null;
const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is rinning at http://localhost:3000");
    });
  } catch (e) {
    console.log(`SERVER ERROR ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

app.post("/register/", async (request, response) => {
  const { username, name, password, gender, location } = request.body;

  const getQuery = `
    SELECT * FROM user
    WHERE username = '${username}';`;
  const dbUser = await database.get(getQuery);

  if (dbUser === undefined) {
    const hashedPassword = await bcrypt.hash(password, 10);
    const updateUserQuery = `
    INSERT INTO user(username , name , password , gender , location)
    VALUES (
        '${username}',
        '${name}',
        '${hashedPassword}',
        '${gender}',
        '${location}'
    );`;
    await database.run(updateUserQuery);
    response.send("User Updated Successfully");
  } else {
    response.status(400);
    response.send("User Already Exists");
  }
});

app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  //console.log(password);
  const getQuery = `
    SELECT * FROM user 
    WHERE username = '${username}';`;

  const dbUser = await database.get(getQuery);
  //console.log(dbUser.password);

  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);

    //console.log(isPasswordMatched);

    if (isPasswordMatched === true) {
      const payload = {
        username: username,
      };
      const jwtToken = jwt.sign(payload, "salkjsadalshakssl");
      response.send({ jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

const authenticateToken = (request, response, next) => {
  let jwtToken;

  const authHeader = request.headers["authorization"];

  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }

  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "salkjsadalshakssl", async (error, user) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        next();
      }
    });
  }
};

app.get("/states/", authenticateToken, async (request, response) => {
  const getStatesQuery = `
    SELECT * FROM state;`;

  const stateList = await database.all(getStatesQuery);
  response.send(
    stateList.map((eachItem) => ({
      stateId: eachItem.state_id,
      stateName: eachItem.state_name,
      population: eachItem.population,
    }))
  );
});

app.get("/states/:stateId/", async (request, response) => {
  const { stateId } = request.params;
  let jwtToken;

  const authHeader = request.headers["authorization"];

  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }

  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "salkjsadalshakssl", async (error, user) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        const getUserQuery = `
    SELECT * FROM state
    WHERE state_id = ${stateId};`;

        const user = await database.get(getUserQuery);
        response.send({
          stateId: user.state_id,
          stateName: user.state_name,
          population: user.population,
        });
      }
    });
  }
});

app.post("/districts/", authenticateToken, async (request, response) => {
  const { districtName, stateId, cases, cured, active, deaths } = request.body;

  const updateDistrictQuery = `
    INSERT 
      INTO 
    district
    (district_name , state_id , cases  ,cured , active, deaths)
    VALUES(
        '${districtName}',
        ${stateId} ,
        ${cases},
        ${cured},
        ${active},
        ${deaths}
    );`;

  await database.run(updateDistrictQuery);
  response.send("District Successfully Added");
});

app.get(
  "/districts/:districtId/",

  async (request, response) => {
    const { districtId } = request.params;
    let jwtToken;

    const authHeader = request.headers["authorization"];

    if (authHeader !== undefined) {
      jwtToken = authHeader.split(" ")[1];
    }

    if (jwtToken === undefined) {
      response.status(401);
      response.send("Invalid JWT Token");
    } else {
      jwt.verify(jwtToken, "salkjsadalshakssl", async (error, user) => {
        if (error) {
          response.status(401);
          response.send("Invalid JWT Token");
        } else {
          const getDistrictQuery = `
    SELECT * FROM district
    WHERE district_id = ${districtId};`;

          const resultObj = await database.get(getDistrictQuery);

          response.send({
            districtId: districtId,
            districtName: resultObj.district_name,
            stateId: resultObj.state_id,
            cases: resultObj.cases,
            cured: resultObj.cured,
            active: resultObj.active,
            deaths: resultObj.deaths,
          });
        }
      });
    }
  }
);

app.delete(
  "/districts/:districtId/",
  authenticateToken,
  async (request, response) => {
    const { districtId } = request.params;

    const deleteQuery = `
    DELETE FROM district
    WHERE district_id = ${districtId};`;

    await database.run(deleteQuery);

    response.send("District Removed");
  }
);

app.put(
  "/districts/:districtId/",
  authenticateToken,
  async (request, response) => {
    const { districtId } = request.params;
    const {
      districtName,
      stateId,
      cases,
      cured,
      active,
      deaths,
    } = request.body;
    const updateDistrictQuery = `
  UPDATE
    district
  SET
    district_name = '${districtName}',
    state_id = ${stateId},
    cases = ${cases},
    cured = ${cured},
    active = ${active}, 
    deaths = ${deaths}
  WHERE
    district_id = ${districtId};
  `;

    await database.run(updateDistrictQuery);
    response.send("District Details Updated");
  }
);

app.get("/states/:stateId/stats/", async (request, response) => {
  const { stateId } = request.params;

  let jwtToken;

  const authHeader = request.headers["authorization"];
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }

  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "salkjsadalshakssl", async (error, user) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        const getStateStatsQuery = `
                       SELECT
                         SUM(cases),
                          SUM(cured),
                          SUM(active),
                          SUM(deaths)
                        FROM
                           district
                        WHERE
                      state_id=${stateId};`;
        const stats = await database.get(getStateStatsQuery);
        response.send({
          totalCases: stats["SUM(cases)"],
          totalCured: stats["SUM(cured)"],
          totalActive: stats["SUM(active)"],
          totalDeaths: stats["SUM(deaths)"],
        });
      }
    });
  }
});

module.exports = app;
